#!/usr/bin/env python

##############################################################################
# Welcome to part two of the Hello Grok Tutorial!
#
# In this tutorial we will:
#
# Promote a model to production ready status
# Stream new records in bulk and get predictions
##############################################################################

import time
import csv
import os
import signal
import sys
import json
import grokpy

from grokpy import Client, GrokError

##############################################################################
# Configuration Settings

API_KEY = 'YOUR_KEY_HERE'
MODEL_ID = 'MUPgC8olAXMDeCLQRIcLGAHKzbJB' #MODEL_ID = 'YOUR_MODEL_ID'
PROJECT_ID = '393' #PROJECT_ID = 'YOUR_PROJECT_ID'

NEW_RECORDS = 'data/rec-center-stream-training.csv'
OUTPUT_CSV = 'output/streamPredictions.csv'

##############################################################################
# API KEY NOTE: A slightly more secure method is to store your API key in your
# shell environment.
#
# From the command line:
#  echo "export GROK_API_KEY=YOUR_KEY_HERE" >> ~/.bashrc
#  source ~/.bashrc

def HelloGrokPart2():

  ##############################################################################
  # Setup
  #

  print 'Connecting to Grok ...'
  grok = Client(API_KEY)
  print 'Retrieving Project ...'
  myProject = grok.getProject(PROJECT_ID)
  print 'Retrieving Model ...'
  recCenterEnergyModel = myProject.getModel(MODEL_ID)

  ##############################################################################
  # Promote our model
  #
  # Production models are long running processes.
  # Once started you can:
  #       - Send new data directly and get back predictions (Shown below)
  #       - Set a stream to which the model will continually listen.
  #
  # NOTE: Production models may incur charges even if not being sent new data.
  #       Please remember to stop your models if you do not intend to use them.

  # Create and start a production model
  print 'Promoting model and updating model id ...'
  recCenterEnergyModel.promote()

  ##############################################################################
  # Data in, predictions out

  fileHandle= open(NEW_RECORDS)
  newRecords = [row for row in csv.reader(fileHandle)]

  fileHandle.close()

  # Send data. (Recall that this model will aggregate into hourly buckets)
  print 'Sending new data ...'
  # This method will send a maximum of 5k records per request.
  recCenterEnergyModel.sendRecords(newRecords)

  # Get all the new predictions
  then = time.time()
  headers, resultRows = recCenterEnergyModel.monitorPredictions(endRow = 2206)

  # Align predictions with actuals
  resultRows = grok.alignPredictions(headers, resultRows)

  #############################################################################
  # Write out predictions to a CSV

  if not os.path.exists('output'):
    print 'Output directory not found, creating ...'
    os.mkdir('output')
  print "Saving results to " + OUTPUT_CSV
  fileHandle = open(OUTPUT_CSV, 'w')
  writer = csv.writer(fileHandle)
  writer.writerow(headers)
  writer.writerows(resultRows)
  fileHandle.close()

  ##############################################################################
  # Cleanup
  myProject.stopAllModels()

  print "\n\nWonderful! You've completed Part Two!"
  print ('Why not take a moment to examine the predictions generated by your '
         'trained model? Then you can move on to Part Three!')

if __name__ == '__main__':
  HelloGrokPart2()
